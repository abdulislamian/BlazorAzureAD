@page "/listevents"
@using BlazorWithIdentityPlatform.Data
@inject IHttpClientFactory HttpClientFactory
@inject ITokenAcquisition TokenAcquisitionService

<SfSchedule TValue="AppointmentData">
    <ScheduleEventSettings DataSource="@DataSource"></ScheduleEventSettings>
</SfSchedule>

@code
{
    private HttpClient httpClient;
    string DisplayName = string.Empty;
    List<Calendar> AllCalendars = new List<Calendar>();
    List<AppointmentData> DataSource = new List<AppointmentData>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // httpClient = HttpClientFactory.CreateClient();
            // var token = await TokenAcquisitionService.GetAccessTokenForUserAsync(new string[] { "Calendars.Read" });
            // httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // /////////////////// List Events ///////////////
            // HttpResponseMessage getEvents = await httpClient.GetAsync("https://graph.microsoft.com/beta/me/calendar/events");
            // if (getEvents.IsSuccessStatusCode)
            // {
            //     string json = await getEvents.Content.ReadAsStringAsync();
            //     JObject result = JsonConvert.DeserializeObject(json) as JObject;

            //     foreach (JProperty child in result.Properties().Where(p => !p.Name.StartsWith("@")))
            //     {
            //         AllCalendars = child.Value.ToObject<List<Calendar>>();
            //         @foreach (var calendar in AllCalendars)
            //         {
            //             var appointment = new AppointmentData();
            //             appointment.Subject = calendar.AdditionalData["subject"].ToString();
            //             appointment.StartTime = (DateTime)JObject.Parse(calendar.AdditionalData["start"].ToString())["dateTime"];
            //             appointment.EndTime = (DateTime)JObject.Parse(calendar.AdditionalData["end"].ToString())["dateTime"];
            //             DataSource.Add(appointment);
            //         }
            //     }
            var httpClient = HttpClientFactory.CreateClient();
            var token = await Connections.GenerateToken();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            /////////////////// List Events ///////////////
            HttpResponseMessage getEvents = await httpClient.GetAsync("https://graph.microsoft.com/beta/me/calendar/events");

            if (getEvents.IsSuccessStatusCode)
            {
                string jsonResponse = await getEvents.Content.ReadAsStringAsync();

                // Deserialize the JSON response into a list of dynamic objects
                var events = JsonConvert.DeserializeAnonymousType(jsonResponse, new { value = new List<Event>() });

                foreach (var eventData in events.value)
                {
                    var appointment = new AppointmentData();
                    appointment.Subject = eventData.Subject;
                    appointment.StartTime = (eventData.Start.DateTime);
                    appointment.EndTime = eventData.End.DateTime;
                    DataSource.Add(appointment);
                }
            }
        }

        catch (Exception ex)
        {
            throw ex.InnerException;
        }
    }


    public class AppointmentData
    {
        public string Subject { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
    }

    public class Event
    {
        public string ODataType { get; set; }
        public string Id { get; set; }
        public string CreatedDateTime { get; set; }
        public string LastModifiedDateTime { get; set; }
        public string ChangeKey { get; set; }
        public List<object> Categories { get; set; }
        public string TransactionId { get; set; }
        public string OriginalStartTimeZone { get; set; }
        public string OriginalEndTimeZone { get; set; }
        public string ICalUId { get; set; }
        public string Uid { get; set; }
        public string ICalUIdV2 { get; set; }
        public int ReminderMinutesBeforeStart { get; set; }
        public bool IsReminderOn { get; set; }
        public bool HasAttachments { get; set; }
        public string Subject { get; set; }
        public string BodyPreview { get; set; }
        public string Importance { get; set; }
        public string Sensitivity { get; set; }
        public bool IsAllDay { get; set; }
        public bool IsCancelled { get; set; }
        public bool IsOrganizer { get; set; }
        public bool ResponseRequested { get; set; }
        public object SeriesMasterId { get; set; }
        public string ShowAs { get; set; }
        public string Type { get; set; }
        public string WebLink { get; set; }
        public object OnlineMeetingUrl { get; set; }
        public bool IsOnlineMeeting { get; set; }
        public string OnlineMeetingProvider { get; set; }
        public bool AllowNewTimeProposals { get; set; }
        public object OccurrenceId { get; set; }
        public bool IsDraft { get; set; }
        public bool HideAttendees { get; set; }
        public ResponseStatus ResponseStatus { get; set; }
        public Body Body { get; set; }
        public Start Start { get; set; }
        public End End { get; set; }
        public Location Location { get; set; }
        public List<object> Locations { get; set; }
        public object Recurrence { get; set; }
        public List<object> Attendees { get; set; }
        public Organizer Organizer { get; set; }
        public object OnlineMeeting { get; set; }
        public string CalendarODataAssociationLink { get; set; }
        public string CalendarODataNavigationLink { get; set; }
    }

    public class ResponseStatus
    {
        public string Response { get; set; }
        public DateTime Time { get; set; }
    }

    public class Body
    {
        public string ContentType { get; set; }
        public string Content { get; set; }
    }

    public class Start
    {
        public DateTime DateTime { get; set; }
        public string TimeZone { get; set; }
    }

    public class End
    {
        public DateTime DateTime { get; set; }
        public string TimeZone { get; set; }
    }

    public class Location
    {
        public string DisplayName { get; set; }
        public string LocationType { get; set; }
        public string UniqueIdType { get; set; }
        public Address Address { get; set; }
        public Coordinates Coordinates { get; set; }
    }

    public class Address
    {
        public string Type { get; set; }
    }

    public class Coordinates
    {
    }

    public class Organizer
    {
        public EmailAddress2 EmailAddress { get; set; }
    }

    public class EmailAddress2
    {
        public string Name { get; set; }
        public string Address { get; set; }
    }

    public class Root
    {
        public string ODataContext { get; set; }
        public List<Event> Value { get; set; }
    }

}
